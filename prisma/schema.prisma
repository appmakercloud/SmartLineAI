generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String?  @unique
  passwordHash  String?
  phoneHash     String?
  credits       Int      @default(0)
  subscription  String   @default("free") // free, starter, professional, business
  pushToken     String?
  
  // Free trial fields
  freeTrialStartsAt DateTime?
  freeTrialEndsAt   DateTime?
  freeMinutesUsed   Float    @default(0)
  freeSmsUsed       Int      @default(0)
  trialPhoneNumber  String?
  trialStatus       String   @default("none") // none, active, expired, upgraded
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  numbers       VirtualNumber[]
  calls         Call[]
  messages      Message[]
  transactions  Transaction[]
  aiSettings    AISettings?
  subscriptions UserSubscription[]
  usageHistory  UsageHistory[]
}

model VirtualNumber {
  id            String   @id @default(uuid())
  userId        String
  number        String   @unique
  countryCode   String
  type          String   @default("temporary") // temporary, permanent
  expiresAt     DateTime?
  isActive      Boolean  @default(true)
  monthlyRate   Float    @default(0)
  provider      String   @default("plivo") // plivo, twilio
  providerNumberId String? // Store Twilio SID or Plivo ID
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  calls         Call[]
  messages      Message[]
  
  @@index([userId])
  @@index([expiresAt])
  @@index([provider])
}

model Call {
  id            String   @id @default(uuid())
  userId        String
  numberId      String
  plivoCallId   String?  @unique
  twilioCallSid String?  @unique
  provider      String   @default("plivo") // plivo, twilio
  direction     String   // inbound, outbound
  fromNumber    String
  toNumber      String
  duration      Int      @default(0)
  status        String   // initiated, ringing, answered, completed, failed
  recordingUrl  String?
  transcription String?
  aiSummary     String?
  cost          Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  number        VirtualNumber @relation(fields: [numberId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([numberId])
  @@index([createdAt])
  @@index([provider])
}

model Message {
  id            String   @id @default(uuid())
  userId        String
  numberId      String
  plivoMessageId String? @unique
  twilioMessageSid String? @unique
  provider      String   @default("plivo") // plivo, twilio
  direction     String   // inbound, outbound
  fromNumber    String
  toNumber      String
  content       String
  mediaUrls     String[] @default([])
  status        String   // sent, delivered, failed, received
  aiReply       String?
  cost          Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  number        VirtualNumber @relation(fields: [numberId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([numberId])
  @@index([createdAt])
  @@index([provider])
}

model Transaction {
  id            String   @id @default(uuid())
  userId        String
  type          String   // credit_purchase, subscription, number_purchase
  amount        Float
  currency      String   @default("USD")
  status        String   // pending, completed, failed
  stripeId      String?  @unique
  description   String
  metadata      Json?
  createdAt     DateTime @default(now())
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([createdAt])
}

model AISettings {
  id                String   @id @default(uuid())
  userId            String   @unique
  voicemailEnabled  Boolean  @default(true)
  transcriptionEnabled Boolean @default(true)
  smartReplyEnabled Boolean  @default(false)
  autoReplyMessage  String?
  voiceGreeting     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SubscriptionPlan {
  id                      String   @id
  name                    String
  displayName             String
  price                   Float
  currency                String   @default("USD")
  interval                String   @default("month")
  
  // Limits
  includedMinutes         Int
  includedSms             Int
  includedNumbers         Int
  pricePerExtraMinute     Float    @default(0.025)
  pricePerExtraSms        Float    @default(0.01)
  pricePerExtraNumber     Float    @default(5.0)
  
  // Features
  hasAiFeatures           Boolean  @default(false)
  hasVoicemailTranscription Boolean @default(false)
  hasCallRecording        Boolean  @default(false)
  hasAutoAttendant        Boolean  @default(false)
  hasAnalytics            Boolean  @default(false)
  hasApiAccess            Boolean  @default(false)
  hasCrmIntegration       Boolean  @default(false)
  hasTeamFeatures         Boolean  @default(false)
  hasPrioritySupport      Boolean  @default(false)
  
  // Metadata
  isActive                Boolean  @default(true)
  sortOrder               Int      @default(0)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  userSubscriptions       UserSubscription[]
}

model UserSubscription {
  id                   String   @id @default(uuid())
  userId               String
  planId               String
  status               String   @default("active") // active, cancelled, expired, past_due
  
  // Usage tracking
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  minutesUsed          Float    @default(0)
  smsUsed              Int      @default(0)
  
  // Billing
  stripeSubscriptionId String?
  stripePriceId        String?
  nextBillingDate      DateTime?
  cancelledAt          DateTime?
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan                 SubscriptionPlan @relation(fields: [planId], references: [id])
  usageHistory         UsageHistory[]
  
  @@index([userId])
  @@index([status])
  @@index([currentPeriodEnd])
}

model UsageHistory {
  id             String   @id @default(uuid())
  userId         String
  subscriptionId String
  type           String   // call, sms
  amount         Float    // minutes for calls, count for sms
  date           DateTime @db.Date
  createdAt      DateTime @default(now())
  
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription   UserSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@index([userId, date])
  @@index([subscriptionId, date])
}